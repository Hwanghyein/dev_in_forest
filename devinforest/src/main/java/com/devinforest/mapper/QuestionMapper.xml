<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.devinforest.mapper.QuestionMapper">
	
	<!-- 삭제된 질문 총 개수 -->
	<select id="deletedQuestionTotalRow" resultType="int" parameterType="String">
	SELECT 
			COUNT(*)
		FROM
			dev_question_back
		WHERE question_title LIKE CONCAT('%',#{searchWord},'%')
	</select>
	
	<!-- 질문 총 개수  -->
	<select id="questionTotalRow" resultType="int" parameterType="String">
		SELECT 
			COUNT(*)
		FROM
			dev_question
		WHERE question_title LIKE CONCAT('%',#{searchWord},'%')
	</select>
	
	<!-- 질문 목록(최근순)  -->
	<select id="selectQuestionList" resultType="com.devinforest.vo.Question" parameterType="java.util.Map">
		SELECT 
			question_no questionNo,
			member_name memberName,
			question_title questionTitle,
			question_content questionContent,
			question_reputation reputation,
			question_createdate questionCreateDate,
			question_updatedate questionUpdateDate,
			question_ip questionIp,
			question_views questionViews
		FROM dev_question
		WHERE question_title LIKE CONCAT('%', #{searchWord}, '%') 
		ORDER BY question_createdate DESC
		LIMIT #{beginRow}, #{rowPerPage} 
	</select>
	
	<!-- 질문 작성 -->
	<insert id="insertQuestion" parameterType="com.devinforest.vo.Question">
		INSERT INTO 
			dev_question(
				member_name,
				question_title,
				question_content,
				question_reputation,
				question_createdate,
				question_updatedate,
				question_ip
			) VALUES(
				#{memberName},
				#{questionTitle},
				#{questionContent},
				#{questionReputation},
				NOW(),
				NOW(),
				#{questionIp}
				
			)
	</insert>
	
	<!-- 상세보기 -->
	<select id="selectQuestionOne" resultType="com.devinforest.vo.Question" parameterType="com.devinforest.vo.Question">
		SELECT 
			question_no questionNo,
			member_name memberName,
			question_title questionTitle,
			question_content questionContent,
			question_reputation questionReputation,
			question_createdate questionCreateDate,
			question_updatedate questionUpdateDate,
			question_ip questionIp
		FROM dev_question
		WHERE question_no = #{questionNo}
	</select>
	
	<!-- 질문 리스트랑 상세보기 조회수 같게 하기 위한 쿼리 -->
	<update id="listViewsCount" parameterType="int">
	UPDATE
		dev_question
	SET
		question_views = #{viewsCountOne}
	WHERE 
		question_no = #{questionNo}
	
	</update>
	<!-- 질문 조회수 +1 (별도 테이블) -->
	<insert id="plusViews" parameterType="com.devinforest.vo.Question">
		INSERT INTO 
			dev_question_views(
				question_no,
				member_name
			)
		VALUES(
			#{questionNo},
			#{memberName}
		)
	</insert>
	
	<!-- 조회수 +1한 회원 체크 -->
	<select id="viewsCheck" resultType="String" parameterType="com.devinforest.vo.Question">
		SELECT 
			member_name
		FROM dev_question_views
		WHERE question_no = #{questionNo}
		AND member_name = #{memberName}
	</select>
	
	<!-- 조회수 카운트(상세보기) -->
	<select id="viewsCountOne" resultType="int" parameterType="com.devinforest.vo.Question">
		SELECT 
			COUNT(*)
		FROM dev_question_views
		WHERE question_no = #{questionNo}
	</select>
	
	<!-- 질문 삭제 -->
	<delete id="deleteQuestion" parameterType="com.devinforest.vo.Question">
		DELETE FROM dev_question
		WHERE question_no = #{questionNo}
	</delete>
	
	
	<!-- 질문 삭제 전 백업 추가 -->
	<insert id="insertQuestionBack" parameterType="com.devinforest.vo.Question">
		INSERT INTO 
			dev_question_back(
				question_no,
				member_name,
				question_title,
				question_content,
				question_reputation,
				question_createdate,
				question_updatedate,
				question_content_back_date,
				question_ip
			) VALUES(
				#{questionNo},
				#{memberName},
				#{questionTitle},
				#{questionContent},
				#{questionReputation},
				#{questionCreateDate},
				#{questionUpdateDate},
				NOW(),
				#{questionIp}
			)
	</insert>
	
	<!-- 삭제된 질문 목록 -->
	<select id="selectRomovedQuestion" resultType="com.devinforest.vo.Question" parameterType="com.devinforest.vo.Question">
		SELECT 
			question_no questionNo,
			member_name memberName,
			question_title questionTitle,
			question_content questionContent,
			question_reputation reputation,
			question_createdate questionCreateDate,
			question_updatedate questionUpdateDate,
			question_ip questionIp
		FROM dev_question_back
	</select>
	
	<!-- 질문 수정 -->
	<update id="updateQuestion" parameterType="com.devinforest.vo.Question">
		UPDATE dev_question 
		SET
			question_title = #{questionTitle},
			question_content = #{questionContent},
			question_reputation = #{questionReputation},
			question_updatedate = NOW(),
			question_ip = #{questionIp}
		WHERE question_no = #{questionNo}
	</update>
</mapper>